# astra_monitor_server/server/websocket_server.py

import asyncio
import json
import websockets
from PyQt5.QtCore import QObject, pyqtSignal

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ config.py
from ..config_loader import APP_CONFIG

class WebSocketServer(QObject):
    new_message = pyqtSignal(dict)
    new_connection = pyqtSignal(str)
    connection_lost = pyqtSignal(str)
    
    def __init__(self, host, port, max_size=100 * 1024 * 1024):
        super().__init__()
        self.host = host
        self.port = port
        self.clients = {}
        self.server = None
        self.loop = None
        self.max_size = max_size
        
    def start_server(self):
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)

        async def _start_server():
            self.server = await websockets.serve(
                self.handler, self.host, self.port,
                max_size=self.max_size,
                ping_interval=30,      # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                ping_timeout=60        # –û–∂–∏–¥–∞—Ç—å –ø–æ–Ω–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
            )
            print(f"Server started on ws://{self.host}:{self.port} with max_size={self.max_size / 1024 / 1024:.0f}MB")

        self.loop.run_until_complete(_start_server())
        self.loop.run_forever()
        
    async def handler(self, websocket):
        client_ip = websocket.remote_address[0]
        client_port = websocket.remote_address[1]
        client_id = f"{client_ip}:{client_port}"
        
        try:
            # –ñ–¥–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            try:
                auth_message = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                data = json.loads(auth_message)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if 'auth_token' not in data or data.get('auth_token') != APP_CONFIG['AUTH_TOKEN']:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç {client_id}")
                    await websocket.close(code=4001, reason="Invalid authentication token")
                    return
                    
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {client_id}")
                
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {client_id}")
                await websocket.close(code=4002, reason="Authentication timeout")
                return
            except json.JSONDecodeError:
                print(f"üìÑ –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç {client_id}")
                await websocket.close(code=4003, reason="Invalid JSON format")
                return
            
            # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            self.clients[client_id] = websocket
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            client_info = data.get('client_info', {})
            self.new_connection.emit(json.dumps({'client_id': client_id, 'client_info': client_info}))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in websocket:
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                    # –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞–Ω–∫–æ–≤ —Ñ–∞–π–ª–æ–≤).
                    data = await self.loop.run_in_executor(None, json.loads, message)
                    data['client_id'] = client_id
                    data['client_ip'] = client_ip
                    self.new_message.emit(data)
                except json.JSONDecodeError:
                    error_msg = {"error": "Invalid JSON", "message": message, "client_id": client_id}
                    self.new_message.emit(error_msg)
                    
        except websockets.exceptions.ConnectionClosed:
            print(f"üìû –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {client_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {client_id} - {e}")
        finally:
            if client_id in self.clients:
                del self.clients[client_id]
            self.connection_lost.emit(client_id)
            
    def stop_server(self):
        if self.loop and self.loop.is_running():
            self.loop.call_soon_threadsafe(self.loop.stop)
            
    async def send_command(self, client_id, command):
        if client_id in self.clients:
            try:
                await self.clients[client_id].send(json.dumps({"command": command}))
                return True
            except:
                self.connection_lost.emit(client_id)
                return False
        return False
            
    async def client_disconnect(self, client_id):
        if client_id in self.clients:
            try:
                await self.clients[client_id].close()
                return True
            except:
                self.connection_lost.emit(client_id)
                return False
        return False