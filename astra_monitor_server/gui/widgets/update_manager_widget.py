# astra_monitor_server/gui/widgets/update_manager_widget.py

import asyncio
import base64
import os
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QComboBox, 
                             QLabel, QPushButton, QTextEdit, QMessageBox, QTableWidget, 
                             QHeaderView, QAbstractItemView, QTableWidgetItem, QCheckBox,
                             QFileDialog)
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt, pyqtSignal

class UpdateManagerWidget(QWidget):
    run_in_terminal_requested = pyqtSignal(str)

    def __init__(self, parent=None, ws_server=None, client_id=None):
        super().__init__(parent)
        self.ws_server = ws_server
        self.client_id = client_id
        self.repo_files_content = {}
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout(self)
        
        # --- Repositories ---
        repo_group = QGroupBox("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏")
        repo_layout = QVBoxLayout(repo_group)
        
        repo_actions_layout = QHBoxLayout()
        self.repo_selector = QComboBox()
        self.repo_selector.currentTextChanged.connect(self.display_repo_content)
        repo_actions_layout.addWidget(QLabel("–§–∞–π–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"))
        repo_actions_layout.addWidget(self.repo_selector, 1)
        
        self.load_repos_btn = QPushButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å")
        self.load_repos_btn.clicked.connect(self.load_repositories)
        repo_actions_layout.addWidget(self.load_repos_btn)
        
        self.save_repo_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_repo_btn.clicked.connect(self.save_repository)
        repo_actions_layout.addWidget(self.save_repo_btn)
        
        self.repo_content_edit = QTextEdit()
        self.repo_content_edit.setFont(QFont("Monospace", 9))
        
        repo_layout.addLayout(repo_actions_layout)
        repo_layout.addWidget(self.repo_content_edit)
        main_layout.addWidget(repo_group)
        
        # --- Packages ---
        pkg_group = QGroupBox("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏")
        pkg_layout = QVBoxLayout(pkg_group)
        
        pkg_actions_layout = QHBoxLayout()
        self.check_updates_btn = QPushButton("–®–∞–≥ 1: –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ (apt update)")
        self.check_updates_btn.clicked.connect(self.check_for_updates)
        self.list_upgradable_btn = QPushButton("–®–∞–≥ 2: –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã")
        self.list_upgradable_btn.clicked.connect(self.list_upgradable_packages)
        self.install_selected_btn = QPushButton("‚¨ÜÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        self.install_selected_btn.clicked.connect(self.install_selected_updates)
        self.install_all_btn = QPushButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É")
        self.install_all_btn.clicked.connect(self.install_all_updates)
        pkg_actions_layout.addWidget(self.check_updates_btn)
        pkg_actions_layout.addWidget(self.list_upgradable_btn)
        pkg_actions_layout.addWidget(self.install_selected_btn)
        pkg_actions_layout.addWidget(self.install_all_btn)
        pkg_actions_layout.addStretch()
        
        self.updates_table = QTableWidget()
        self.updates_table.setColumnCount(4)
        self.updates_table.setHorizontalHeaderLabels(["", "üì¶ –ü–∞–∫–µ—Ç", "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è", "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"])
        self.updates_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.updates_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.updates_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.updates_table.setColumnWidth(0, 30)
        
        pkg_layout.addLayout(pkg_actions_layout)
        pkg_layout.addWidget(self.updates_table)
        main_layout.addWidget(pkg_group)
        
        main_layout.setStretch(1, 1) # pkg_group

    def load_repositories(self):
        asyncio.run_coroutine_threadsafe(
            self.ws_server.send_command(self.client_id, "apt:get_repos"),
            self.ws_server.loop
        )

    def save_repository(self):
        current_file = self.repo_selector.currentText()
        if not current_file:
            QMessageBox.warning(self, "‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
            return
        
        content = self.repo_content_edit.toPlainText()
        content_b64 = base64.b64encode(content.encode('utf-8')).decode('ascii')
        
        asyncio.run_coroutine_threadsafe(
            self.ws_server.send_command(self.client_id, f"apt:save_repo:{current_file}:{content_b64}"),
            self.ws_server.loop
        )

    def check_for_updates(self):
        self.updates_table.setRowCount(0)
        QMessageBox.information(self, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 'apt-get update'.\n–û—Ç—Å–ª–µ–¥–∏—Ç—å –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–Ω–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.\n–ü–æ—Å–ª–µ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ '–®–∞–≥ 2'.")
        self.run_in_terminal_requested.emit("sudo apt-get update")

    def list_upgradable_packages(self):
        self.updates_table.setRowCount(0)
        asyncio.run_coroutine_threadsafe(
            self.ws_server.send_command(self.client_id, "apt:list_upgradable"),
            self.ws_server.loop
        )

    def install_selected_updates(self):
        selected_packages = []
        for i in range(self.updates_table.rowCount()):
            checkbox_widget = self.updates_table.cellWidget(i, 0)
            if checkbox_widget and checkbox_widget.findChild(QCheckBox).isChecked():
                package_item = self.updates_table.item(i, 1)
                selected_packages.append(package_item.text())
        
        if not selected_packages:
            QMessageBox.warning(self, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±–æ—Ä–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        self.run_in_terminal_requested.emit(f"sudo apt-get install --only-upgrade -y {' '.join(selected_packages)}")
        QMessageBox.information(self, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–ø—É—â–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤.\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ '–®–∞–≥ 2', —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.")

    def install_all_updates(self):
        reply = QMessageBox.question(self, "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É?", QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.run_in_terminal_requested.emit("sudo apt-get upgrade -y --enable-upgrade")
            QMessageBox.information(self, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–ø—É—â–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ '–®–∞–≥ 2', —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.")

    def display_repo_content(self, filename):
        if filename in self.repo_files_content:
            self.repo_content_edit.setText(self.repo_files_content[filename])

    def handle_repo_data(self, data):
        self.repo_files_content = data
        self.repo_selector.clear()
        self.repo_selector.addItems(sorted(data.keys()))

    def handle_upgradable_list(self, packages):
        self.updates_table.setRowCount(len(packages))
        for i, pkg in enumerate(packages):
            # Checkbox
            checkbox_widget = QWidget()
            checkbox_layout = QHBoxLayout(checkbox_widget)
            checkbox = QCheckBox()
            checkbox_layout.addWidget(checkbox)
            checkbox_layout.setAlignment(Qt.AlignCenter)
            checkbox_layout.setContentsMargins(0,0,0,0)
            self.updates_table.setCellWidget(i, 0, checkbox_widget)
            
            self.updates_table.setItem(i, 1, QTableWidgetItem(pkg.get('name', '')))
            self.updates_table.setItem(i, 2, QTableWidgetItem(pkg.get('current', '')))
            self.updates_table.setItem(i, 3, QTableWidgetItem(pkg.get('new', '')))
        self.updates_table.resizeColumnsToContents()
        self.updates_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)