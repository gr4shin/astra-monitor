# astra_monitor_server/gui/widgets/screenshot_widget.py

import base64
import asyncio
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
                             QPushButton, QLabel, QScrollArea, QFileDialog)
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QImage, QPixmap

class ScreenshotWidget(QWidget):
    def __init__(self, parent=None, ws_server=None, client_id=None, log_callback=None, settings_screenshot={}):
        super().__init__(parent)
        self.ws_server = ws_server
        self.client_id = client_id
        self.log_callback = log_callback or (lambda msg: print(msg))
        self.current_image = None
        self.settings_screenshot = settings_screenshot.get('screenshot',{})
        self.auto_refresh_timer = QTimer()
        self.auto_refresh_timer.timeout.connect(self.take_screenshot)
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_group = QGroupBox("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–º")
        control_layout = QHBoxLayout(control_group)
                
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.take_btn = QPushButton("üì∏ –°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫")
        self.take_btn.clicked.connect(self.take_screenshot)
        control_layout.addWidget(self.take_btn)
        
        self.auto_refresh_btn = QPushButton("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.auto_refresh_btn.setCheckable(True)
        self.auto_refresh_btn.clicked.connect(self.toggle_auto_refresh)
        control_layout.addWidget(self.auto_refresh_btn)
        
        control_layout.addStretch()
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        image_group = QGroupBox("üñºÔ∏è –≠–∫—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç–∞")
        image_layout = QVBoxLayout(image_group)
        
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setMinimumSize(400, 300)
        self.image_label.setStyleSheet("background-color: #2b2b2b; border: 1px solid #555;")
        self.image_label.setText("–ù–∞–∂–º–∏—Ç–µ 'üì∏ –°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # Scroll area –¥–ª—è –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(self.image_label)
        
        image_layout.addWidget(scroll_area)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–Ω–∏–º–∫–µ
        info_layout = QHBoxLayout()
        self.info_label = QLabel("–†–∞–∑–º–µ—Ä: - | –í—Ä–µ–º—è: -")
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_screenshot)
        self.save_btn.setEnabled(False)
        
        info_layout.addWidget(self.info_label)
        info_layout.addStretch()
        info_layout.addWidget(self.save_btn)
        
        image_layout.addLayout(info_layout)
        
        layout.addWidget(control_group)
        layout.addWidget(image_group)
        
    def take_screenshot(self):
        """–ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
        quality = self.settings_screenshot.get('quality', 85)
        self.log_callback(f"üì∏ –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–∫–∞—á–µ—Å—Ç–≤–æ: {quality}%)")
        
        future = asyncio.run_coroutine_threadsafe(
            self.ws_server.send_command(self.client_id, f"screenshot_quality:{quality}"), 
            self.ws_server.loop
        )
    
    def toggle_auto_refresh(self, checked):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if checked:
            delay = self.settings_screenshot.get('refresh_delay', 5) * 1000  # convert to milliseconds
            self.auto_refresh_timer.start(delay)
            self.log_callback(f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (–∫–∞–∂–¥—ã–µ {self.settings_screenshot.get('refresh_delay', 5)} —Å–µ–∫)")
        else:
            self.auto_refresh_timer.stop()
            self.log_callback("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
    
    def update_screenshot(self, image_data, quality, timestamp):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            img_data = base64.b64decode(image_data)
            
            # –°–æ–∑–¥–∞–µ–º QImage –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            image = QImage()
            image.loadFromData(img_data)
            
            if image.isNull():
                self.log_callback("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
            pixmap = QPixmap.fromImage(image)
            scaled_pixmap = pixmap.scaled(
                self.image_label.width() - 20, 
                self.image_label.height() - 20,
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            )
            
            self.image_label.setPixmap(scaled_pixmap)
            self.current_image = pixmap  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            size_text = f"{pixmap.width()}x{pixmap.height()}"
            time_text = QDateTime.fromString(timestamp, Qt.ISODate).toString("dd.MM.yyyy HH:mm:ss")
            self.info_label.setText(f"–†–∞–∑–º–µ—Ä: {size_text} | –ö–∞—á–µ—Å—Ç–≤–æ: {quality}% | –í—Ä–µ–º—è: {time_text}")
            
            self.save_btn.setEnabled(True)
            self.log_callback(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω ({size_text}, –∫–∞—á–µ—Å—Ç–≤–æ: {quality}%)")
            
        except Exception as e:
            self.log_callback(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
    
    def save_screenshot(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not self.current_image:
            return
            
        file_path, _ = QFileDialog.getSaveFileName(
            self, "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", 
            f"screenshot_{QDateTime.currentDateTime().toString('yyyyMMdd_hhmmss')}.png",
            "Images (*.png *.jpg *.jpeg)"
        )
        
        if file_path:
            try:
                self.current_image.save(file_path)
                self.log_callback(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            except Exception as e:
                self.log_callback(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")