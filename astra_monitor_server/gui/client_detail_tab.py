# astra_monitor_server/gui/client_detail_tab.py

import json
import asyncio
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QListWidget,
    QStackedWidget, QPushButton, QSplitter, QTextEdit,
    QLineEdit, QLabel, QMessageBox, QSpinBox, QCheckBox, QFormLayout)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QIntValidator

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from .dialogs.custom_command_dialog import CustomCommandDialog
from .widgets.system_info_widget import SystemInfoWidget
from .widgets.system_info_full_widget import SystemInfoFullWidget
from .widgets.file_manager_widget import FileManagerWidget
from .widgets.update_manager_widget import UpdateManagerWidget
from .widgets.screenshot_widget import ScreenshotWidget

class ClientDetailTab(QWidget):
    log_message_requested = pyqtSignal(str)
    custom_commands_updated = pyqtSignal()
    settings_changed = pyqtSignal(dict)
    append_to_log_signal = pyqtSignal(str)

    def __init__(self, parent=None, ws_server=None, client_id=None, client_data=None, custom_commands=None, client_settings=None, main_window=None):
        super().__init__(parent)
        self.ws_server = ws_server
        self.custom_commands = custom_commands if custom_commands is not None else {}
        self.client_id = client_id
        self.client_data = client_data or {}
        self.os_type = self.client_data.get('os_type', 'Linux') # Default to Linux for safety
        self.client_settings = client_settings or {}
        self.main_window = main_window # Store main window reference
        self.init_ui()
        self.log_message_requested.connect(self.log_to_client)
        self.append_to_log_signal.connect(self.log_to_client)
        
    def init_ui(self):
        layout = QHBoxLayout(self)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–µ–Ω—é
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setContentsMargins(0, 0, 0, 0)
        
        menu_group = QGroupBox("üóÇÔ∏è –ú–µ–Ω—é")
        menu_layout = QVBoxLayout(menu_group)
        
        self.menu_list = QListWidget()
        self.content_stack = QStackedWidget()

        # Create a map of menu item names to their corresponding widgets and visibility
        self.menu_map = {
            "‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ": (SystemInfoFullWidget(), True),
            "üìÇ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä": (FileManagerWidget(ws_server=self.ws_server, client_id=self.client_id, log_callback=self.append_to_log_signal.emit, main_window=self.main_window), True),
            "‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã": (self._create_commands_widget(), True),
            "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏": (UpdateManagerWidget(ws_server=self.ws_server, client_id=self.client_id), self.os_type == 'Linux'),
            "üñºÔ∏è –≠–∫—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç–∞": (ScreenshotWidget(ws_server=self.ws_server, client_id=self.client_id, log_callback=self.append_to_log_signal.emit, settings_screenshot=self.client_data.get('settings')), True),
            "üìú –ñ—É—Ä–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞": (QTextEdit(), True),
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": (self._create_settings_widget(), True),
        }

        self.visible_menu_items = []
        for name, (widget, is_visible) in self.menu_map.items():
            if is_visible:
                self.menu_list.addItem(name)
                self.content_stack.addWidget(widget)
                self.visible_menu_items.append(name)

        # Assign widgets to instance variables for later access
        self.system_info_full_widget = self.menu_map["‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"][0]
        self.file_manager_widget = self.menu_map["üìÇ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"][0]
        # The commands widget is created and assigned in the map, but we need to access its children
        commands_widget = self.menu_map["‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã"][0]
        if self.os_type == 'Linux':
            self.update_manager_widget = self.menu_map["üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"][0]
        self.screenshot_widget = self.menu_map["üñºÔ∏è –≠–∫—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç–∞"][0]
        self.client_log_output = self.menu_map["üìú –ñ—É—Ä–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞"][0]
        self.client_log_output.setReadOnly(True)

        self.menu_list.currentRowChanged.connect(self.change_content)
        menu_layout.addWidget(self.menu_list)
        left_layout.addWidget(menu_group)
        
        layout.addWidget(left_widget, 1)
        layout.addWidget(self.content_stack, 3)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.menu_list.setCurrentRow(0)
        self.terminal_output.append("üñ•Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞!\n")

    def _create_commands_widget(self):
        commands_widget = QWidget()
        commands_layout = QVBoxLayout(commands_widget)
        
        splitter = QSplitter(Qt.Vertical)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –°–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥
        command_lists_widget = QWidget()
        command_lists_layout = QHBoxLayout(command_lists_widget)

        # ... –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        quick_commands_group = QGroupBox("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        quick_commands_layout = QVBoxLayout(quick_commands_group)

        if self.os_type == 'Linux':
            quick_commands = [("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", "sudo apt autoremove -y && sudo apt clean"), ("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫–∏", "df -h"), ("üåê –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "ss -tuln"), ("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "who"), ("‚è∞ Uptime —Å–∏—Å—Ç–µ–º—ã", "uptime")]
        else: # Windows
            quick_commands = [("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "winget upgrade"), ("‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã", "winget upgrade --all --accept-source-agreements"), ("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫–∏", "wmic logicaldisk get size,freespace,caption"), ("üåê –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "netstat -an"), ("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "query user"), ("‚è∞ Uptime —Å–∏—Å—Ç–µ–º—ã", "systeminfo | find \"System Boot Time\"")]

        for name, cmd in quick_commands:
            btn = QPushButton(name)
            btn.clicked.connect(lambda ch, c=cmd, n=name: self.execute_command(c, n))
            quick_commands_layout.addWidget(btn)
        quick_commands_layout.addStretch()
        command_lists_layout.addWidget(quick_commands_group)

        # ... –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        custom_commands_group = QGroupBox("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        custom_commands_layout = QVBoxLayout(custom_commands_group)
        self.custom_commands_list = QListWidget()
        self.custom_commands_list.addItems(self.custom_commands.keys())
        self.custom_commands_list.itemDoubleClicked.connect(self.edit_custom_command)
        
        custom_buttons_layout = QHBoxLayout()
        
        exec_btn = QPushButton("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å")
        exec_btn.setToolTip("–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        exec_btn.clicked.connect(self.execute_selected_custom_command)
        
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        add_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É")
        add_btn.clicked.connect(self.add_custom_command)
        
        edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.setToolTip("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        edit_btn.clicked.connect(self.edit_custom_command)
        
        remove_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å")
        remove_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        remove_btn.clicked.connect(self.remove_custom_command)
        
        custom_buttons_layout.addWidget(exec_btn)
        custom_buttons_layout.addWidget(add_btn)
        custom_buttons_layout.addWidget(edit_btn)
        custom_buttons_layout.addWidget(remove_btn)
        custom_buttons_layout.addStretch()
        
        custom_commands_layout.addWidget(self.custom_commands_list)
        custom_commands_layout.addLayout(custom_buttons_layout)
        command_lists_layout.addWidget(custom_commands_group)

        splitter.addWidget(command_lists_widget)

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –¢–µ—Ä–º–∏–Ω–∞–ª
        terminal_group = QGroupBox("‚å®Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª")
        terminal_layout = QVBoxLayout(terminal_group)
        self.terminal_output = QTextEdit()
        self.terminal_output.setReadOnly(True)
        self.terminal_output.setFont(QFont("Monospace", 10))
        self.terminal_output.setStyleSheet("background-color: #2b2b2b; color: #f0f0f0;")
        
        input_layout = QHBoxLayout()
        self.prompt_label = QLabel(f"{self.client_data.get('hostname', 'client')}:~>")
        self.terminal_input = QLineEdit()
        self.terminal_input.setFont(QFont("Monospace", 10))
        self.terminal_input.returnPressed.connect(self.execute_terminal_command)
        input_layout.addWidget(self.prompt_label)
        input_layout.addWidget(self.terminal_input)

        terminal_layout.addWidget(self.terminal_output)
        terminal_layout.addLayout(input_layout)
        splitter.addWidget(terminal_group)
        splitter.setSizes([250, 400])

        commands_layout.addWidget(splitter)
        return commands_widget

    def _create_settings_widget(self):
        settings_widget = QWidget()
        settings_layout = QVBoxLayout(settings_widget)
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç—ã
        screenshot_group = QGroupBox("üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞")
        screenshot_layout = QFormLayout(screenshot_group)

        self.screenshot_quality = QSpinBox()
        self.screenshot_quality.setRange(1, 100)
        self.screenshot_quality.setValue(self.client_settings.get('screenshot', {}).get('quality', 85))
        self.screenshot_quality.setSuffix("%")
        screenshot_layout.addRow("–ö–∞—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", self.screenshot_quality)

        self.screenshot_delay = QSpinBox()
        self.screenshot_delay.setRange(1, 60)
        self.screenshot_delay.setValue(self.client_settings.get('screenshot', {}).get('refresh_delay', 5))
        self.screenshot_delay.setSuffix(" —Å–µ–∫")
        screenshot_layout.addRow("–ó–∞–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", self.screenshot_delay)

        self.screenshot_auto = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞")
        self.screenshot_auto.setChecked(self.client_settings.get('screenshot', {}).get('enabled', True))
        screenshot_layout.addRow(self.screenshot_auto)

        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_group = QGroupBox("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        monitoring_layout = QFormLayout(monitoring_group)

        self.monitoring_interval = QLineEdit(str(self.client_settings.get('monitoring_interval', 10)))
        self.monitoring_interval.setValidator(QIntValidator(1, 3600))
        monitoring_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):", self.monitoring_interval)

        self.auto_refresh = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.auto_refresh.setChecked(self.client_settings.get('auto_refresh', True))
        monitoring_layout.addRow(self.auto_refresh)

        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        connection_group = QGroupBox("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        connection_layout = QFormLayout(connection_group)

        self.reconnect_delay = QLineEdit(str(self.client_settings.get('reconnect_delay', 5)))
        self.reconnect_delay.setValidator(QIntValidator(1, 60))
        connection_layout.addRow("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫):", self.reconnect_delay)

        self.max_reconnect_attempts = QLineEdit(str(self.client_settings.get('max_reconnect_attempts', 10)))
        self.max_reconnect_attempts.setValidator(QIntValidator(1, 100))
        connection_layout.addRow("–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", self.max_reconnect_attempts)

        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_group = QGroupBox("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        security_layout = QFormLayout(security_group)

        self.enable_encryption = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
        self.enable_encryption.setChecked(self.client_settings.get('enable_encryption', False))
        security_layout.addRow(self.enable_encryption)

        self.log_sensitive_commands = QCheckBox("–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        self.log_sensitive_commands.setChecked(self.client_settings.get('log_sensitive_commands', True))
        security_layout.addRow(self.log_sensitive_commands)

        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_buttons_layout = QHBoxLayout()
        save_settings_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_settings_btn.clicked.connect(self.save_settings)
        reset_settings_btn = QPushButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        reset_settings_btn.clicked.connect(self.reset_settings)

        settings_buttons_layout.addWidget(save_settings_btn)
        settings_buttons_layout.addWidget(reset_settings_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ layout
        settings_layout.addWidget(screenshot_group)
        settings_layout.addWidget(monitoring_group)
        settings_layout.addWidget(connection_group)
        settings_layout.addWidget(security_group)
        settings_layout.addLayout(settings_buttons_layout)
        settings_layout.addStretch()
        return settings_widget

    def get_full_system_info(self):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        future = asyncio.run_coroutine_threadsafe(
            self.ws_server.send_command(self.client_id, "get_full_system_info"), 
            self.ws_server.loop
        )
        self.log_message_requested.emit("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ...")
    
    def change_content(self, index):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.content_stack.setCurrentIndex(index)
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if index == 0:
            self.get_full_system_info()
        
    def update_client_data(self, new_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client_data.update(new_data)
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ main_window
        # –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 'full_system_info'

    def log_to_client(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞."""
        self.client_log_output.append(message)
        self.client_log_output.verticalScrollBar().setValue(self.client_log_output.verticalScrollBar().maximum())

    def append_to_terminal(self, text, is_command=False):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–∫–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        if is_command:
            prompt = self.prompt_label.text()
            self.terminal_output.append(f"<font color='#87d7ff'>{prompt}</font> <font color='white'>{text}</font>")
        else:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            text = text.replace('\n', '<br>')
            self.terminal_output.append(f"<font color='#d3d3d3'>{text}</font>")
        self.terminal_output.verticalScrollBar().setValue(self.terminal_output.verticalScrollBar().maximum())

    def update_prompt(self, path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –Ω–æ–≤—ã–º –ø—É—Ç–µ–º"""
        hostname = self.client_data.get('hostname', 'client')
        self.prompt_label.setText(f"{hostname}:{path}>")

    def execute_command(self, command, name=""):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        self.append_to_terminal(command, is_command=True)
        future = asyncio.run_coroutine_threadsafe(
            self.ws_server.send_command(self.client_id, f"execute:{command}"), 
            self.ws_server.loop
        )
        client_name = self.client_data.get('hostname', self.client_id)
        log_name = name if name else command
        self.log_message_requested.emit(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ {client_name}: {log_name}")
    
    def execute_selected_custom_command(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        current_item = self.custom_commands_list.currentItem()
        if current_item:
            command_name = current_item.text()
            self.execute_custom_command(command_name)

    def execute_custom_command(self, command_name):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏"""
        command = self.custom_commands.get(command_name, "")
        if command:
            self.execute_command(command, command_name)

    def execute_terminal_command(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        command = self.terminal_input.text().strip()
        if command:
            self.execute_command(command)
            self.terminal_input.clear()
    
    def add_custom_command(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        dialog = CustomCommandDialog(self)
        if dialog.exec_():
            command_data = dialog.get_command_data()
            name = command_data['name']
            command = command_data['command']
            
            if name and command:
                if name in self.custom_commands:
                    QMessageBox.warning(self, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ", f"–ö–æ–º–∞–Ω–¥–∞ —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
                
                self.custom_commands[name] = command
                self.custom_commands_list.addItem(name)
                self.log_message_requested.emit(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {name}")
                self.custom_commands_updated.emit()

    def edit_custom_command(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        current_item = self.custom_commands_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        old_name = current_item.text()
        command = self.custom_commands.get(old_name, "")
        
        dialog = CustomCommandDialog(self, command_data={"name": old_name, "command": command})
        
        if dialog.exec_():
            new_data = dialog.get_command_data()
            new_name = new_data['name']
            new_command = new_data['command']

            if not new_name or not new_command:
                QMessageBox.warning(self, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                return

            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            if old_name == new_name:
                self.custom_commands[old_name] = new_command
                self.log_message_requested.emit(f"‚úèÔ∏è –ö–æ–º–∞–Ω–¥–∞ '{old_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                # –ï—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è
                if new_name in self.custom_commands:
                    QMessageBox.warning(self, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ", f"–ö–æ–º–∞–Ω–¥–∞ —Å –∏–º–µ–Ω–µ–º '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                del self.custom_commands[old_name]
                self.custom_commands[new_name] = new_command
                current_item.setText(new_name)
                self.log_message_requested.emit(f"‚úèÔ∏è –ö–æ–º–∞–Ω–¥–∞ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'.")
            
            self.custom_commands_updated.emit()

    def remove_custom_command(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        current_item = self.custom_commands_list.currentItem()
        if current_item:
            command_name = current_item.text()
            reply = QMessageBox.question(
                self,
                "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É '{command_name}'?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                if command_name in self.custom_commands:
                    del self.custom_commands[command_name]
                    self.custom_commands_list.takeItem(self.custom_commands_list.row(current_item))
                    self.log_message_requested.emit(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command_name}")
                    self.custom_commands_updated.emit()
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings = {
                'monitoring_interval': int(self.monitoring_interval.text()),
                'auto_refresh': self.auto_refresh.isChecked(),
                'reconnect_delay': int(self.reconnect_delay.text()),
                'max_reconnect_attempts': int(self.max_reconnect_attempts.text()),
                'enable_encryption': self.enable_encryption.isChecked(),
                'log_sensitive_commands': self.log_sensitive_commands.isChecked(),
                'screenshot': {
                    'quality': self.screenshot_quality.value(),
                    'refresh_delay': self.screenshot_delay.value(),
                    'enabled': self.screenshot_auto.isChecked()
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
            future = asyncio.run_coroutine_threadsafe(
                self.ws_server.send_command(self.client_id, f"apply_settings:{json.dumps(settings)}"), 
                self.ws_server.loop
            )
            
            # –°–æ–æ–±—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ –∏—Ö
            self.settings_changed.emit(settings)
            client_name = self.client_data.get('hostname', self.client_id)
            self.log_message_requested.emit(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É {client_name}. –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.")
            QMessageBox.information(self, "‚úÖ –£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É! –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.")
            
        except ValueError:
            QMessageBox.warning(self, "‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(
            self,
            "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.monitoring_interval.setText("10")
            self.auto_refresh.setChecked(True)
            self.reconnect_delay.setText("5")
            self.max_reconnect_attempts.setText("10")
            self.enable_encryption.setChecked(False)
            self.log_sensitive_commands.setChecked(True)
            self.screenshot_quality.setValue(85)
            self.screenshot_delay.setValue(5)
            self.screenshot_auto.setChecked(True)
            client_name = self.client_data.get('hostname', self.client_id)
            self.log_message_requested.emit(f"üóëÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_name}")
